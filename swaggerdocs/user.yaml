swagger: '3.0.0'
info:
  title: Users Model API
  description: API related to Users models
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /api/user/register/:
    post:
      summary: Register Users
      description: Endpoint for registering users
      tags:
        - Users Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: JohnDoe
                mobileNumber:
                  type: integer
                  example: 1234567890
                dob:
                  type: string
                  format: date
                  example: 2000-01-01                
                userType:
                  type: string
                  enum:
                    - child
                    - teenager
                    - adult
                  example: adult
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                  nullable: true                 

      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Registered user successfully
                  result:
                    type: string
                    example: ''
        401:
          description: Unauthorized response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized user
  /api/user/verify-otp:
    post:
      summary: Verify OTP
      description: Endpoint to verify OTP
      tags:
        - Users Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mobileNumber:
                  type: integer
                  example: 1234567890
                otp:
                  type: string
                  example: 123456
                deviceId:
                  type: string
                  example: 123456
                deviceType:
                  type: string
                  example: web
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OTP verified successfully
                  result:
                    type: object
                    properties:
                      token:
                        type: string
                        example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        401:
          description: Unauthorized response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized user
  /api/user/upload-avatar:
    post:
      summary: Upload Avatar
      description: Endpoint to upload user avatar
      tags:
        - Users Model
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image file to upload (jpg or png)
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Avatar uploaded successfully
                  imageUrl:
                    type: string
                    example: '/upload/avatar/filename.png'
        400:
          description: Bad Request response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
        401:
          description: Unauthorized response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized user

/api/user/send-otp:
    post:
      summary: Send OTP
      description: Endpoint to Send OTP
      tags:
        - Users Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mobileNumber:
                  type: integer
                  example: 1234567890               
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OTP Sent successfully
                  result:
                    type: object
                    properties:
                      token:
                        type: string
                        example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        401:
          description: Unauthorized response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized user

/api/user/profile/{userId}:
    get:
      summary: Fetch profile by user ID
      description: Endpoint to fetch profile by user ID
      tags:
        - Users Model
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            example: "670d2fd920824883c3100257"        
      security:
        - JWT: []
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Fetch users by user ID successfully
                  result:
                    type: array
                    items:
                      type: object                     
        404:
          description: User not found for the given UserId
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No profile found for this userId
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred

/api/user/coursematerial-track/{userId}:
    get:
      summary: Fetch courseMaterialTrack percentage by user ID
      description: Endpoint to fetch profile by user ID
      tags:
        - Users Model
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            example: "670d2fd920824883c3100257"
      security:
        - JWT: []
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Fetch courseMaterialTrack percentage by user ID successfully
                  result:
                    type: array
                    items:
                      type: object                     
        404:
          description: courseMaterialTrack not found for the given UserId
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No courseMaterialTrack found for this userId
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred

/api/user/profile-update/{userId}:
    put:
      summary: update profile by user ID
      description: Endpoint to update profile by user ID
      tags:
        - Users Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: JohnDoe
                mobileNumber:
                  type: integer
                  example: 1234567890
                gender:
                  type: string
                  enum:
                    - male
                    - female
                  example: male
                dob:
                  type: string
                  format: date
                  example: 2000-01-01
                userType:
                  type: string
                  enum:
                    - child
                    - teenager
                    - adult
                  example: adult
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                  nullable: true                 
                parentName:
                  type: string
                  example: Danial
                  nullable: true
                parentDob:
                  type: date
                  format: date
                  example: 1985-01-01
                  nullable: true 
                interest:
                  type: string
                  example: Craft
                  nullable: true  

      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            example: "670d2fd920824883c3100257"
      security:
        - JWT: []
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Fetch users by user ID successfully
                  result:
                    type: array
                    items:
                      type: object                     
        404:
          description: User not found for the given UserId
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No profile found for this userId
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred
  
/api/user/all:
    get:
      summary: Fetch profile by user ID
      description: Endpoint to fetch profiles based on filters
      tags:
        - Users Model      
      parameters:
        - name: userId
          in: query
          required: false
          description: The ID of the user
          schema:
            type: string
            example: "670d2fd920824883c3100257"
        - name: fullName
          in: query
          required: false
          description: Filter by the user's full name
          schema:
            type: string
            example: "Juan123"
        - name: mobileNumber
          in: query
          required: false
          description: Filter by the user's mobile number
          schema:
            type: string
            example: "9933577890"
        - name: status
          in: query
          required: false
          description: Filter by the user's status (e.g., 1 for active, 0 for inactive)
          schema:
            type: integer
            example: 1
        - name: subscriptionStatus
          in: query
          required: false
          description: Filter by the user's subscription status (e.g., active or inactive)
          schema:
            type: string
            enum: [active, inactive]
            example: "active"
        - name: limit
          in: query
          required: false
          description: The number of records to retrieve
          schema:
            type: integer
            example: 10
        - name: page
          in: query
          required: false
          description: The page number for pagination
          schema:
            type: integer
            example: 1
      security:
        - JWT: []
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Fetch users successfully
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "670d2fd920824883c3100257"
                        fullName:
                          type: string
                          example: "Juan123"
                        mobileNumber:
                          type: string
                          example: "9933577890"
                        status:
                          type: integer
                          example: 1
                        subscriptionStatus:
                          type: string
                          example: "active"
        404:
          description: User not found for the given filters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No users found matching the criteria
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred

/api/user/register-admin/:
    post:
      summary: Register Admin
      description: Endpoint for registering Admin
      tags:
        - Users Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: JohnDoe
                mobileNumber:
                  type: integer
                  example: 1234567890
                dob:
                  type: string
                  format: date
                  example: 2000-01-01
                userType:
                  type: string
                  enum:
                    - child
                    - teenager
                    - adult
                  example: adult
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                  nullable: true  
                password:
                  type: string
                  example: Password@123                              

      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Registered user successfully
                  result:
                    type: string
                    example: ''
        401:
          description: Unauthorized response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized user

/api/user/login:
    post:
      summary: Admin login
      description: Endpoint to Admin login
      tags:
        - Users Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: email
                  example: admin@gmail.com
                password:
                  type: string
                  example: Admin@12345               
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: You are successfully logged in
                  result:
                    type: object
                    properties:
                      token:
                        type: string
                        example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        401:
          description: Unauthorized response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized user
 
/api/user/parentdob-update/{userId}:
    put:
      summary: update parentdob, parentName by user ID
      description: Endpoint to update parentdob, parentName by user ID
      tags:
        - Users Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parentDob:
                  type: date
                  format: date
                  example: 1985-01-01  
                parentName:
                  type: string
                  example: "JohnDoe"                                
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            example: "670d2fd920824883c3100257"
      security:
        - JWT: []
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: updated successfully
                  result:
                    type: array
                    items:
                      type: object                     
        404:
          description: User not found for the given UserId
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No profile found for this userId
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred

/api/user/parentdob-verify:
    post:
      summary: verify parentdob year by user ID
      description: Endpoint to verify parentdob year by user ID
      tags:
        - Users Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parentDobYear:
                  type: integer
                  example: 1985
                userId:
                  type: string
                  example: "670d2fd920824883c3100257" 
      security:
        - JWT: []
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: verified successfully
                  result:
                    type: array
                    items:
                      type: object                     
        404:
          description: User not found for the given UserId
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No profile found for this userId
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred

/api/user/switch-student/{studentId}:
    get:
      summary: switch student profile by user ID
      description: switch student profile by user ID
      tags:
        - Users Model
      parameters:
        - name: studentId
          in: path
          required: true
          description: The ID of the student
          schema:
            type: string
            example: "670d2fd920824883c3100257"
      security:
        - JWT: []
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully Done
                  result:
                    type: array
                    items:
                      type: object                     
        404:
          description: student not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No profile found 
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred
/api/user/logout:
    post:
      summary: user logout
      description: Endpoint for user logout
      tags:
        - Users Model
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceType:
                  type: string
                  example: web
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: logged out successfully
                  result:
                    type: object
                    properties:
                      token:
                        type: string
                        example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        401:
          description: Unauthorized response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized user
  
/api/user/userCount:
    get:
      summary: Fetch profile userCount
      description: Endpoint to fetch userCount
      tags:
        - Users Model
      security:
        - JWT: []
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Fetched successfully
                  result:
                    type: array
                    items:
                      type: object                     
        404:
          description: User not found for the given UserId
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No profile found for this userId
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred




components:
  securitySchemes:
    JWT:
      type: apiKey
      in: header
      name: Authorization
      description: JWT Bearer token
